/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ActivityRequest } from '../models';
// @ts-ignore
import type { UserActivityResponse } from '../models';
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new activity record for the specified user
         * @summary Add new activity
         * @param {number} userId 
         * @param {ActivityRequest} activityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActivity: async (userId: number, activityRequest: ActivityRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addActivity', 'userId', userId)
            // verify required parameter 'activityRequest' is not null or undefined
            assertParamExists('addActivity', 'activityRequest', activityRequest)
            const localVarPath = `/api/v1/users/{userId}/activities/`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Records progress time (in minutes) for a specific activity
         * @summary Add progress to activity
         * @param {number} userId 
         * @param {number} activityId 
         * @param {number} progressInMinutes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProgress: async (userId: number, activityId: number, progressInMinutes: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addProgress', 'userId', userId)
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('addProgress', 'activityId', activityId)
            // verify required parameter 'progressInMinutes' is not null or undefined
            assertParamExists('addProgress', 'progressInMinutes', progressInMinutes)
            const localVarPath = `/api/v1/users/{userId}/activities/{activityId}/progress`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (progressInMinutes !== undefined) {
                localVarQueryParameter['progressInMinutes'] = progressInMinutes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a specific activity from the user\'s records
         * @summary Delete activity
         * @param {number} userId 
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivity: async (userId: number, activityId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteActivity', 'userId', userId)
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('deleteActivity', 'activityId', activityId)
            const localVarPath = `/api/v1/users/{userId}/activities/{activityId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all activities for the specified user
         * @summary Get user activities
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivities: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getActivities', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}/activities/`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a random activity
         * @summary Get random activity
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomActivity: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getRandomActivity', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}/activities/random`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new activity record for the specified user
         * @summary Add new activity
         * @param {number} userId 
         * @param {ActivityRequest} activityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addActivity(userId: number, activityRequest: ActivityRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addActivity(userId, activityRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.addActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Records progress time (in minutes) for a specific activity
         * @summary Add progress to activity
         * @param {number} userId 
         * @param {number} activityId 
         * @param {number} progressInMinutes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProgress(userId: number, activityId: number, progressInMinutes: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProgress(userId, activityId, progressInMinutes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.addProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes a specific activity from the user\'s records
         * @summary Delete activity
         * @param {number} userId 
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteActivity(userId: number, activityId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivity(userId, activityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.deleteActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all activities for the specified user
         * @summary Get user activities
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivities(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivities(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.getActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a random activity
         * @summary Get random activity
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomActivity(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomActivity(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.getRandomActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * Creates a new activity record for the specified user
         * @summary Add new activity
         * @param {number} userId 
         * @param {ActivityRequest} activityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActivity(userId: number, activityRequest: ActivityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addActivity(userId, activityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Records progress time (in minutes) for a specific activity
         * @summary Add progress to activity
         * @param {number} userId 
         * @param {number} activityId 
         * @param {number} progressInMinutes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProgress(userId: number, activityId: number, progressInMinutes: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addProgress(userId, activityId, progressInMinutes, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a specific activity from the user\'s records
         * @summary Delete activity
         * @param {number} userId 
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivity(userId: number, activityId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteActivity(userId, activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all activities for the specified user
         * @summary Get user activities
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivities(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserActivityResponse> {
            return localVarFp.getActivities(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a random activity
         * @summary Get random activity
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomActivity(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getRandomActivity(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * Creates a new activity record for the specified user
     * @summary Add new activity
     * @param {number} userId 
     * @param {ActivityRequest} activityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public addActivity(userId: number, activityRequest: ActivityRequest, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).addActivity(userId, activityRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Records progress time (in minutes) for a specific activity
     * @summary Add progress to activity
     * @param {number} userId 
     * @param {number} activityId 
     * @param {number} progressInMinutes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public addProgress(userId: number, activityId: number, progressInMinutes: number, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).addProgress(userId, activityId, progressInMinutes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a specific activity from the user\'s records
     * @summary Delete activity
     * @param {number} userId 
     * @param {number} activityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public deleteActivity(userId: number, activityId: number, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).deleteActivity(userId, activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all activities for the specified user
     * @summary Get user activities
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivities(userId: number, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getActivities(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a random activity
     * @summary Get random activity
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getRandomActivity(userId: number, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getRandomActivity(userId, options).then((request) => request(this.axios, this.basePath));
    }
}

