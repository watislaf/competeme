/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Friendship } from '../models';
// @ts-ignore
import type { FriendshipRequest } from '../models';
/**
 * FriendshipControllerApi - axios parameter creator
 * @export
 */
export const FriendshipControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendRequest: async (userId: number, friendshipRequest: FriendshipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('acceptFriendRequest', 'userId', userId)
            // verify required parameter 'friendshipRequest' is not null or undefined
            assertParamExists('acceptFriendRequest', 'friendshipRequest', friendshipRequest)
            const localVarPath = `/api/v1/users/{userId}/friends/accept`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendshipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFriendRequest: async (userId: number, friendshipRequest: FriendshipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cancelFriendRequest', 'userId', userId)
            // verify required parameter 'friendshipRequest' is not null or undefined
            assertParamExists('cancelFriendRequest', 'friendshipRequest', friendshipRequest)
            const localVarPath = `/api/v1/users/{userId}/friends/cancel`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendshipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendRequests: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFriendRequests', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}/friends/request`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFriends', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}/friends/`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentFriendRequests: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSentFriendRequests', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}/friends/sent`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {Array<FriendshipRequest>} receiverIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatuses: async (userId: number, receiverIds: Array<FriendshipRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getStatuses', 'userId', userId)
            // verify required parameter 'receiverIds' is not null or undefined
            assertParamExists('getStatuses', 'receiverIds', receiverIds)
            const localVarPath = `/api/v1/users/{userId}/friends/statuses`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (receiverIds) {
                localVarQueryParameter['receiverIds'] = receiverIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFriend: async (userId: number, friendshipRequest: FriendshipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeFriend', 'userId', userId)
            // verify required parameter 'friendshipRequest' is not null or undefined
            assertParamExists('removeFriend', 'friendshipRequest', friendshipRequest)
            const localVarPath = `/api/v1/users/{userId}/friends/remove`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendshipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFriendRequest: async (userId: number, friendshipRequest: FriendshipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('sendFriendRequest', 'userId', userId)
            // verify required parameter 'friendshipRequest' is not null or undefined
            assertParamExists('sendFriendRequest', 'friendshipRequest', friendshipRequest)
            const localVarPath = `/api/v1/users/{userId}/friends/sendRequest`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendshipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendshipControllerApi - functional programming interface
 * @export
 */
export const FriendshipControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendshipControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptFriendRequest(userId, friendshipRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.acceptFriendRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelFriendRequest(userId, friendshipRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.cancelFriendRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriendRequests(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriendRequests(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.getFriendRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriends(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriends(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.getFriends']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentFriendRequests(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSentFriendRequests(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.getSentFriendRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {Array<FriendshipRequest>} receiverIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatuses(userId: number, receiverIds: Array<FriendshipRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Friendship>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatuses(userId, receiverIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.getStatuses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFriend(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFriend(userId, friendshipRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.removeFriend']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendFriendRequest(userId, friendshipRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FriendshipControllerApi.sendFriendRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FriendshipControllerApi - factory interface
 * @export
 */
export const FriendshipControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendshipControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.acceptFriendRequest(userId, friendshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelFriendRequest(userId, friendshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendRequests(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getFriendRequests(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getFriends(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentFriendRequests(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getSentFriendRequests(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {Array<FriendshipRequest>} receiverIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatuses(userId: number, receiverIds: Array<FriendshipRequest>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Friendship>> {
            return localVarFp.getStatuses(userId, receiverIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFriend(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFriend(userId, friendshipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {FriendshipRequest} friendshipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendFriendRequest(userId, friendshipRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendshipControllerApi - object-oriented interface
 * @export
 * @class FriendshipControllerApi
 * @extends {BaseAPI}
 */
export class FriendshipControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} userId 
     * @param {FriendshipRequest} friendshipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public acceptFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).acceptFriendRequest(userId, friendshipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {FriendshipRequest} friendshipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public cancelFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).cancelFriendRequest(userId, friendshipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public getFriendRequests(userId: number, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).getFriendRequests(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public getFriends(userId: number, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).getFriends(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public getSentFriendRequests(userId: number, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).getSentFriendRequests(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {Array<FriendshipRequest>} receiverIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public getStatuses(userId: number, receiverIds: Array<FriendshipRequest>, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).getStatuses(userId, receiverIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {FriendshipRequest} friendshipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public removeFriend(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).removeFriend(userId, friendshipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {FriendshipRequest} friendshipRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public sendFriendRequest(userId: number, friendshipRequest: FriendshipRequest, options?: RawAxiosRequestConfig) {
        return FriendshipControllerApiFp(this.configuration).sendFriendRequest(userId, friendshipRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

